An LL(1) Grammar for Parsing Housecat

Â© Walker Henderson, 2014

EPS is 'epsilon,' the empty string.
<bool>, <int>, <float>, <string>, and <ident> are all represented by strings of terminals.


<primary-expr> ::=
    | <bool>
    | <int>
    | <float>
    | <string>
    | <ident>
    | nil
    | { <statements> }
    | ( <expr> )

<postfix-expr> ::=
    | <primary-expr> <postfix-continuation>

<postfix-continuation> ::=
    | ( <args> ) <postfix-continuation>
    | . <ident> <postfix-continuation>
    | [ <expr> ] <postfix-continuation>
    | EPS

<args> ::=
    | <args-list>
    | EPS

<args-list> ::=
    | <expr>
    | <expr>, <args-list>

<unary-expr> ::=
    | <postfix-expr>
    | - <unary-expr>
    | ! <unary-expr>

<exponential-expr> ::=
    | <unary-expr>
    | <unary-expr> ^ <exponential-expr>

<multiplicative-expr> ::=
    | <exponential-expr>
    | <exponential-expr> * <multiplicative-expr>
    | <exponential-expr> / <multiplicative-expr>
    | <exponential-expr> % <multiplicative-expr>

<additive-expr> ::=
    | <multiplicative-expr>
    | <multiplicative-expr> + <additive-expr>
    | <multiplicative-expr> - <additive-expr>

<relational-expr> ::=
    | <additive-expr>
    | <additive-expr> < <relational-expr>
    | <additive-expr> <= <relational-expr>
    | <additive-expr> > <relational-expr>
    | <additive-expr> >= <relational-expr>

<equality-expr> ::=
    | <relational-expr>
    | <relational-expr> = <equality-expr>
    | <relational-expr> != <equality-expr>
    | <relational-expr> == <equality-expr>
    | <relational-expr> !== <equality-expr>

<and-expr> ::=
    | <equality-expr>
    | <equality-expr> && <and-expr>

<or-expr> ::=
    | <and-expr>
    | <and-expr> || <and-expr>

<expr> ::=
    | <or-expr>




<stmt> ::=
    | <def-stmt>
    | <if-stmt>
    | <if-else-stmt>
    | 


<statments> ::=
    | <stmt> <statements>
    | EPS
